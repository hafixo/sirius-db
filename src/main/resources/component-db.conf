#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

# Adding the db module to the list of known modules...
product {
    modules {
        sirius-db {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }
}

# Configures the system health monitoring
health {

    # Defines limits for the database / JDBC layer
    limits {

        # JDBC query duration
        db-query-duration.gray = 10
        db-query-duration.warn = 500
        db-query-duration.error = 0

        # JDBC connection usage
        db-uses.gray = 25
        db-uses.warn = 0
        db-uses.error = 0

        # JDBC connection pool utilization
        db-pool-utilization.gray = 5
        db-pool-utilization.warn = 80
        db-pool-utilization.error = 98

        # JDBC connections establisehd during a check interval.
        # An increased value here indicates that at least one pool is badly configured
        # and that it might drain the TCP port pool of the operating system, which
        # will effectively block or destroy the TCP/IP stack of the OS
        db-connects.gray = 5
        db-connects.warn = 15
        db-connects.error = 30

        # JDBC queries
        db-queries.gray = 25
        db-queries.warn = 0
        db-queries.error = 0

        # Slow JDBC queries
        slow-db-queries.gray = 0
        slow-db-queries.warn = 2
        slow-db-queries.error = 0

        # Number of redis calls per minute
        redis-calls.gray = 1000
        redis-calls.warning = 64000
        redis-calls.error = 0

        # Duration of a redis call in ms
        redis-call-duration.gray = 25
        redis-call-duration.warning = 500
        redis-call-duration.error = 10000

        # Redis memory usage in megabyte
        redis-memory-usage.gray = 16
        redis-memory-usage.green = 128
        redis-memory-usage.warning = 1025

        # Number of redis pub-sub messages per minute
        redis-messages.gray = 100
        redis-messages.warning = 4096
        redis-messages.error = 0

        # Number of miliseconds required to process a pub-sub message
        redis-message-duration.gray = 25
        redis-message-duration.warning = 500
        redis-message-duration.error = 10000
    }
}

# Defines database connectivity settings
jdbc {

    # Every query which takes longer will be logged to "db-slow" on level INFO
    logQueryThreshold = 10 seconds

    # Every connection which lasts longer will be logged to "db-slow" on level INFO
    logConnectionThreshold = 30 seconds

    # A profile provides a template for database connections.
    # Each value of the profile serves as backup or default value for the one in the database secion.
    # Also a profile value can reference properties defined in one of both sections like this: ${name}.
    # The url property of the mysql profile (below) is an example.
    profile {
        # The default profile only declares connection management properties. These can be overridden in the
        # actual database section.
        default {
            # Number of connections initially opened
            initialSize = 0

            # Maximal number of open connections
            maxActive = 32

            # Maximal number of open unused connections
            maxIdle = 16

            # Validation query used to determine the fitness of a connection
            validationQuery = ""

            # Specifies the service name used for port mapping in docker environments
            service = ""

        }

        # The mysql profile declares common settings to connect to a MySQL database.
        # As the url is auto generated, only the host and the database name need to be defined. By default 'host'
        # will be 'localhost'.
        mysql {
            driver = "com.mysql.jdbc.Driver"
            url = "jdbc:mysql://${host}:${port}/${database}?autoReconnect=true&characterEncoding=utf-8"
            hostUrl = "jdbc:mysql://${host}:${port}/?autoReconnect=true&characterEncoding=utf-8"
            host = "localhost"
            port = "3306"
            validationQuery = "SELECT 1"
            service = "mysql"
        }

        # The maria profile declares common settings to connect to a MariaDB database.
        # As maria DB is a fork of MySQL, things aren't too different for these two profiles.
        mariadb {
            driver = "org.mariadb.jdbc.Driver"
            url = "jdbc:mysql://${host}:${port}/${database}?autoReconnect=true&characterEncoding=utf-8"
            hostUrl = "jdbc:mysql://${host}:${port}/?autoReconnect=true&characterEncoding=utf-8"
            host = "localhost"
            port = "3306"
            validationQuery = "SELECT 1"
            service = "mariadb"
        }

        # Declares a profile for postgres.
        postgres {
            driver = "org.postgresql.Driver"
            url= "jdbc:postgresql://${host}:${port}/${database}"
            hostUrl = "jdbc:postgresql://${host}:${port}"
            host = "localhost"
            port = "5432"
            validationQuery = "SELECT 1"
            service = "postgres"
        }

        # Declares a profile for Yandex Clickhouse.
        clickhouse {
            driver = "ru.yandex.clickhouse.ClickHouseDriver"
            url = "jdbc:clickhouse://${host}:${port}/${database}"
            hostUrl = "jdbc:clickhouse://${host}:${port}"
            host = "localhost"
            port = "8123"
            validationQuery = "SELECT 1"
            service = "clickhouse"
        }
    }

    # Defines JDBC database connections used by the system. Use Database.get("name") to obtain a connection
    # defined here.
    database {
        # Basic sample configuration to illustrate all properties
        # sample {
        #    driver = "my.jdbc.driver.Class"
        #    url = "jdbc:mydb://..."
        #    hostUrl = "jdbc:mydb://..."
        #    user = ""
        #    password = ""
        #    initialSize = 0
        #    maxActive = 10
        #    maxIdle = 1
        #    validationQuery = ""
        # }

        # Use the mysql profile (defined above) to connect to a MySQL database
        # sample-mysql {
        #    # apply profile
        #    profile = "mysql"
        #
        #    # specify a user
        #    user = "test"
        #
        #    # and a password
        #    password = "test"
        #
        #    # Specify the name of the database to connect to
        #    database = "testdb"
        #
        #    # Specify the host to connect to or leave empty to connect to "localhost"
        #    host = "somehost"
        # }
    }
}

# Default setup for mixing the "OR*-Mapper" which can work with SQL/JDBC databases,
# MongoDB and Elasticsearch...
mixing {

    # Contains the JDBC / SQL specific settings for Mixig.
    jdbc {
        default {
            # Determiens whether the schema is update automatically on server startup
            updateSchema = true

            # Contains a single SQL statement which is executed during startup before
            # any other statement is issused.
            #
            # This can be used to send a CREATE DATABASE statement in docker / test
            # environments.
            initSql = ""
        }

        mixing {
            # Contains the name of the database configuration to use
            database = "mixing"

            # Determines the SQL dialect used for DDS statements (Schema Update)
            dialect = "mysql"
        }
    }
}

# Contains the default configuration for Redis
# At least host, as well with some other settings will most probably overwritten in the application.conf
redis {
    # Contains the name of the host which runs the Redis DB
    host = ""

    # Contains a list of sentinels to connect to in a HA environment.
    sentinels = ""

    # Contians the port to connect to
    port = 6379

    # Contains the connection timeout in ms
    timeout = 2000

    # Contains the password used to connect to redis
    password = ""

    # Contains the database index within redis (0..15).
    # Development system can use db 1 and share their instance with a test-system which will run
    # in db 0 - as an example
    db = 0

    # Limits the number of parallel connections
    maxActive = 32

    # Determines how many unused connections are kept in the pool
    maxIdle = 8
}

# Contains the default config used to connect to MongoDB databases
mongo {

    # Contains a list of hosts to connect to (e.g. "localhost:27017"). If you're
    # using the standard port, you can omit the value and just name domains or IP addresses
    hosts = ""

    # Contains the name of the database to connect to.
    db = ""
}

# Contains the default config used to connect to an Elasticsearch cluster
elasticsearch {
    # Contains a list of cluster nodes (e.g. "localhost:9200,anotherNode:9200").
    hosts = ""

    # Contains the index settings per entity.
    settings {
        # Provides a default config for all realms.
        default {
            # Determines the number of shards to use per index.
            numberOfShards = 5

            # Determines the number of replicas (secondary copies) to use per shard.
            numberOfReplicas = 1
        }
    }
}
