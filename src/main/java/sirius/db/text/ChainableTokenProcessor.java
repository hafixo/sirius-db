/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.db.text;

import sirius.kernel.commons.Strings;

import java.util.function.Consumer;

/**
 * Provides a base implementation for all chainable {@link TokenProcessor token processors}.
 * <p>
 * Tokenizing a text is inherently a stream of tasks. Therefore nearly all token processors should be chainable so
 * that these can be combined as needed.
 */
public abstract class ChainableTokenProcessor implements TokenProcessor {

    protected TokenProcessor downstream;

    /**
     * Appends or chains the given processor as the consumer of tokens generated by this processor.
     *
     * @param downstream the processor to emit all tokens to
     */
    public void chain(TokenProcessor downstream) {
        this.downstream = downstream;
    }

    /**
     * Appends or chains the given processor as the consumer of tokens generated by this processor.
     *
     * @param downstream the processor to emit all tokens to
     */
    public void chainConsumer(Consumer<String> downstream) {
        this.downstream = downstream::accept;
    }

    @Override
    public void purge() {
        if (downstream != null) {
            downstream.purge();
        }
    }

    protected void emit(String token) {
        if (Strings.isFilled(token) && downstream != null) {
            downstream.accept(token);
        }
    }
}
