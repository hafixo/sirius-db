/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.db.mongo.facets;

import com.mongodb.DBObject;
import org.bson.Document;
import sirius.db.mixing.EntityDescriptor;
import sirius.db.mongo.Doc;

import java.util.List;

/**
 * Describes a facet which can extend the <tt>$facet</tt> section of the aggregation pipeline generated by
 * {@link sirius.db.mongo.Finder#executeFacets(EntityDescriptor, List)}.
 */
public abstract class MongoFacet {

    protected String name;
    protected Runnable callback;

    /**
     * Creates a new facet with the given name.
     *
     * @param name the name of the facet, which should be unique within a query
     */
    protected MongoFacet(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    /**
     * Emits a BSON object to be placed into the <tt>$facet</tt> stage of the generated pipeline.
     *
     * @param descriptor the descriptor of the entity to be queried - can be used to perform field renamings
     * @return the BSON object representing the facet (most probably a list of sub-stages)
     */
    public abstract DBObject emitFacet(EntityDescriptor descriptor);

    /**
     * Digests the list of results which were generated for this facet.
     *
     * @param result the list of documents retrieved for this facet
     */
    public void digest(List<Object> result) {
        for (Object obj : result) {
            digestResult(new Doc((Document) obj));
        }
        if (callback != null) {
            callback.run();
        }
    }

    /**
     * Digests a single document which was retrieved for this facet.
     *
     * @param result the document to process
     */
    protected abstract void digestResult(Doc result);
}
